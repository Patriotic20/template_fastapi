From 25413cea0a6a13abb9500cf4bb14067e943d6883 Mon Sep 17 00:00:00 2001
From: ddd <ddd>
Date: Wed, 26 Mar 2025 16:31:15 +0500
Subject: [PATCH] fixed migrations

---
 .env                                          | 13 +++++++
 .gitignore                                    |  2 +-
 alembic/env.py                                | 21 +++++++---
 ..._user_table_add.py => 84d8e6eb227c_123.py} | 14 +++----
 .../96e0da6ebb25_is_active_change_to_bool.py  | 38 ------------------
 compose.yml                                   | 17 ++++++++
 main.py                                       | 10 -----
 src/__init__.py                               |  0
 src/api/auth/login.py                         | 12 +++---
 src/api/auth/logout.py                        |  8 ++--
 src/api/auth/refresh.py                       | 13 ++++---
 src/api/auth/signup.py                        |  8 ++--
 src/api/booking/create.py                     |  6 +--
 src/core/base.py                              | 22 -----------
 src/core/config.py                            | 39 +++++++++----------
 src/core/session.py                           | 18 +++++++++
 src/main.py                                   | 13 +++++++
 src/model/__init__.py                         |  3 --
 src/model/base.py                             |  5 +++
 src/model/booking.py                          |  4 +-
 src/model/store.py                            |  4 +-
 src/model/user.py                             |  2 +-
 src/utils/auth_util.py                        | 16 ++++----
 src/utils/crud.py                             |  2 +-
 24 files changed, 147 insertions(+), 143 deletions(-)
 create mode 100644 .env
 rename alembic/versions/{f941995c6ac3_user_table_add.py => 84d8e6eb227c_123.py} (75%)
 delete mode 100644 alembic/versions/96e0da6ebb25_is_active_change_to_bool.py
 create mode 100644 compose.yml
 delete mode 100644 main.py
 create mode 100644 src/__init__.py
 delete mode 100644 src/core/base.py
 create mode 100644 src/core/session.py
 create mode 100644 src/main.py
 create mode 100644 src/model/base.py

diff --git a/.env b/.env
new file mode 100644
index 0000000..576edcb
--- /dev/null
+++ b/.env
@@ -0,0 +1,13 @@
+POSTGRES_DRV=postgresql+asyncpg
+POSTGRES_USER=user
+POSTGRES_PASSWORD=passwd
+POSTGRES_SERVER=localhost
+POSTGRES_PORT=5432
+POSTGRES_DB=ac_db
+
+MODE=dev
+SECRET_KEY=qwerty
+REFRESH_SECRET_KEY=qwerty
+ACCESS_TOKEN_EXPIRE_MINUTES=60
+REFRESH_TOKEN_EXPIRE_DAYS=5
+ALGORITHM=HS256
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index 29e9285..ebe3cd4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -128,7 +128,7 @@ celerybeat.pid
 *.sage.py
 
 # Environments
-.env
+# .env
 .venv
 env/
 venv/
diff --git a/alembic/env.py b/alembic/env.py
index a60ec3e..76ed682 100644
--- a/alembic/env.py
+++ b/alembic/env.py
@@ -1,31 +1,42 @@
+import sys
+from pathlib import Path
+
 import asyncio
 from logging.config import fileConfig
 
 from sqlalchemy import pool
 from sqlalchemy.engine import Connection
 from sqlalchemy.ext.asyncio import async_engine_from_config
-from src.core.config import settings
-from src.core.base import Base
-from src.model import *
 
 from alembic import context
 
 
+project_path = Path.cwd() / 'src'
+sys.path.append(str(project_path))
+
+from src.core.config import pg_settings
+from src.model.user import User
+
+
 # this is the Alembic Config object, which provides
 # access to the values within the .ini file in use.
 config = context.config
 
+config.set_main_option(
+    name="sqlalchemy.url",
+    value=pg_settings.connection_string
+)
+
 # Interpret the config file for Python logging.
 # This line sets up loggers basically.
 if config.config_file_name is not None:
     fileConfig(config.config_file_name)
 
-config.set_main_option("sqlalchemy.url" , settings.connection_string)
 # add your model's MetaData object here
 # for 'autogenerate' support
 # from myapp import mymodel
 # target_metadata = mymodel.Base.metadata
-target_metadata = Base.metadata
+target_metadata = User.metadata
 
 # other values from the config, defined by the needs of env.py,
 # can be acquired:
diff --git a/alembic/versions/f941995c6ac3_user_table_add.py b/alembic/versions/84d8e6eb227c_123.py
similarity index 75%
rename from alembic/versions/f941995c6ac3_user_table_add.py
rename to alembic/versions/84d8e6eb227c_123.py
index 80dd2c9..a68197c 100644
--- a/alembic/versions/f941995c6ac3_user_table_add.py
+++ b/alembic/versions/84d8e6eb227c_123.py
@@ -1,8 +1,8 @@
-"""User table add
+"""123
 
-Revision ID: f941995c6ac3
+Revision ID: 84d8e6eb227c
 Revises: 
-Create Date: 2025-02-28 15:02:26.753197
+Create Date: 2025-03-26 16:29:56.268807
 
 """
 from typing import Sequence, Union
@@ -12,7 +12,7 @@ import sqlalchemy as sa
 
 
 # revision identifiers, used by Alembic.
-revision: str = 'f941995c6ac3'
+revision: str = '84d8e6eb227c'
 down_revision: Union[str, None] = None
 branch_labels: Union[str, Sequence[str], None] = None
 depends_on: Union[str, Sequence[str], None] = None
@@ -24,11 +24,11 @@ def upgrade() -> None:
     sa.Column('id', sa.Integer(), nullable=False),
     sa.Column('username', sa.String(length=100), nullable=False),
     sa.Column('password', sa.String(), nullable=False),
-    sa.Column('email', sa.String(), nullable=True),
+    sa.Column('phone_number', sa.String(), nullable=False),
     sa.Column('first_name', sa.String(), nullable=True),
     sa.Column('last_name', sa.String(), nullable=True),
-    sa.Column('is_active', sa.String(), nullable=True),
-    sa.Column('role', sa.Enum('user', 'admin', name='userrole'), nullable=True),
+    sa.Column('is_active', sa.Boolean(), nullable=True),
+    sa.Column('role', sa.Enum('user', 'admin', 'courier', 'owner', name='userrole'), nullable=True),
     sa.Column('data_joined', sa.DateTime(), nullable=True),
     sa.PrimaryKeyConstraint('id')
     )
diff --git a/alembic/versions/96e0da6ebb25_is_active_change_to_bool.py b/alembic/versions/96e0da6ebb25_is_active_change_to_bool.py
deleted file mode 100644
index 1a2226e..0000000
--- a/alembic/versions/96e0da6ebb25_is_active_change_to_bool.py
+++ /dev/null
@@ -1,38 +0,0 @@
-"""is_active change to bool
-
-Revision ID: 96e0da6ebb25
-Revises: f941995c6ac3
-Create Date: 2025-02-28 16:40:13.003170
-
-"""
-from typing import Sequence, Union
-
-from alembic import op
-import sqlalchemy as sa
-
-
-# revision identifiers, used by Alembic.
-revision: str = '96e0da6ebb25'
-down_revision: Union[str, None] = 'f941995c6ac3'
-branch_labels: Union[str, Sequence[str], None] = None
-depends_on: Union[str, Sequence[str], None] = None
-
-
-def upgrade() -> None:
-    op.alter_column(
-        'users', 'is_active',
-        existing_type=sa.VARCHAR(),
-        type_=sa.Boolean(),
-        postgresql_using="is_active::boolean",
-        existing_nullable=True
-    )
-
-
-
-def downgrade() -> None:
-    # ### commands auto generated by Alembic - please adjust! ###
-    op.alter_column('users', 'is_active',
-               existing_type=sa.Boolean(),
-               type_=sa.VARCHAR(),
-               existing_nullable=True)
-    # ### end Alembic commands ###
diff --git a/compose.yml b/compose.yml
new file mode 100644
index 0000000..ba246f6
--- /dev/null
+++ b/compose.yml
@@ -0,0 +1,17 @@
+services:
+  db_local:
+    image: postgres:17-alpine3.20
+    container_name: db_local
+    restart: "no"
+    ports:
+      - 5432:5432
+    env_file:
+      - ./.env
+    volumes:
+      - ./pgdata:/var/lib/postgresql/data
+    healthcheck:
+      test: ["CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
+      interval: 1m30s
+      timeout: 30s
+      retries: 5
+      start_period: 30s
diff --git a/main.py b/main.py
deleted file mode 100644
index 3a0b099..0000000
--- a/main.py
+++ /dev/null
@@ -1,10 +0,0 @@
-from fastapi import FastAPI
-from src.api import main_router as main_api
-import uvicorn
-
-main_app = FastAPI()
-
-main_app.include_router(main_api)
-
-if __name__ == "__main__":
-    uvicorn.run("main:main_app" , reload=True)
\ No newline at end of file
diff --git a/src/__init__.py b/src/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/src/api/auth/login.py b/src/api/auth/login.py
index 010ef06..9557d9c 100644
--- a/src/api/auth/login.py
+++ b/src/api/auth/login.py
@@ -1,14 +1,14 @@
-from fastapi import APIRouter, Depends, Response, HTTPException, status
+from fastapi import APIRouter, Depends, HTTPException, status
 from fastapi.security import OAuth2PasswordRequestForm
 from sqlalchemy.ext.asyncio import AsyncSession 
 from datetime import timedelta
-from src.core.base import get_db  
-from src.utils.auth_util import (
+from core.session import get_db  
+from utils.auth_util import (
     authenticate_user,
     create_access_token, 
     create_refresh_token,
 )
-from src.core.config import settings
+from src.core.config import app_settings
 
 router = APIRouter()
 
@@ -39,11 +39,11 @@ async def login(
 
     access_token = await create_access_token(
         {"sub": user.username},
-        timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
+        timedelta(minutes=app_settings.ACCESS_TOKEN_EXPIRE_MINUTES)
     )
     refresh_token = await create_refresh_token(
         {"sub": user.username},
-        timedelta(days=settings.REFRESH_TOKEN_EXPIRE_DAYS)
+        timedelta(days=app_settings.REFRESH_TOKEN_EXPIRE_DAYS)
     )
 
     return {
diff --git a/src/api/auth/logout.py b/src/api/auth/logout.py
index 7e9ceec..2739692 100644
--- a/src/api/auth/logout.py
+++ b/src/api/auth/logout.py
@@ -1,9 +1,9 @@
-from fastapi import APIRouter, Response, Depends, HTTPException, status
+from fastapi import APIRouter, Depends, HTTPException, status
 from sqlalchemy.ext.asyncio import AsyncSession
 from sqlalchemy.future import select  
-from src.core.base import get_db  
-from src.utils.auth_util import get_current_user  
-from src.model import User
+from core.session import get_db  
+from utils.auth_util import get_current_user  
+from model import User
 
 router = APIRouter()
 
diff --git a/src/api/auth/refresh.py b/src/api/auth/refresh.py
index 48cabed..f9bb187 100644
--- a/src/api/auth/refresh.py
+++ b/src/api/auth/refresh.py
@@ -1,9 +1,10 @@
+from datetime import timedelta
+
 from fastapi import APIRouter, Depends, Request, HTTPException, status
 from sqlalchemy.ext.asyncio import AsyncSession  
-from src.core.base import get_db  
-from src.utils.auth_util import create_access_token, verify_token, get_user  
-from datetime import timedelta
-from src.core.config import settings
+from core.session import get_db  
+from utils.auth_util import create_access_token, verify_token, get_user  
+from core.config import app_settings
 
 router = APIRouter()
 
@@ -19,7 +20,7 @@ async def refresh_token(
             detail="No refresh token provided"
         )
 
-    payload = await verify_token(refresh_token_value, settings.REFRESH_SECRET_KEY)
+    payload = await verify_token(refresh_token_value, app_settings.REFRESH_SECRET_KEY)
     if not payload:
         raise HTTPException(
             status_code=status.HTTP_401_UNAUTHORIZED,
@@ -36,7 +37,7 @@ async def refresh_token(
     
     new_access_token = await create_access_token(
         {"sub": user.username}, 
-        timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
+        timedelta(minutes=app_settings.ACCESS_TOKEN_EXPIRE_MINUTES)
     )
     
     return {"access_token": new_access_token, "token_type": "bearer"}
\ No newline at end of file
diff --git a/src/api/auth/signup.py b/src/api/auth/signup.py
index 91e25ce..d958877 100644
--- a/src/api/auth/signup.py
+++ b/src/api/auth/signup.py
@@ -1,10 +1,10 @@
 from fastapi import APIRouter, Depends, HTTPException, status
 from sqlalchemy.ext.asyncio import AsyncSession
 from sqlalchemy.future import select  
-from src.schemas.user import RegisterRequest
-from src.core.base import get_db  
-from src.model.user import User
-from src.utils.auth_util import hash_password
+from schemas.user import RegisterRequest
+from core.session import get_db  
+from model.user import User
+from utils.auth_util import hash_password
 
 router = APIRouter()
 
diff --git a/src/api/booking/create.py b/src/api/booking/create.py
index 33b4423..a5416d7 100644
--- a/src/api/booking/create.py
+++ b/src/api/booking/create.py
@@ -1,8 +1,8 @@
 from fastapi import APIRouter , Depends
 from sqlalchemy.ext.asyncio import AsyncSession
-from src.core.base import get_db
-from src.schemas.booking import BookingCreate
-from src.model.booking import Booking
+from core.session import get_db
+from schemas.booking import BookingCreate
+from model.booking import Booking
 
 booking_router = APIRouter()
 
diff --git a/src/core/base.py b/src/core/base.py
deleted file mode 100644
index 79a868e..0000000
--- a/src/core/base.py
+++ /dev/null
@@ -1,22 +0,0 @@
-from sqlalchemy.ext.asyncio import AsyncSession , create_async_engine
-from sqlalchemy.ext.declarative import declarative_base
-from sqlalchemy.orm import sessionmaker
-from src.core.config import settings
-
-engine = create_async_engine(settings.connection_string, echo = True)
-
-SessionLocal = sessionmaker(
-    bind=engine,
-    class_=AsyncSession,
-    autoflush=False,
-    autocommit = False,
-)
-
-async def get_db():
-    session = SessionLocal()
-    try:
-        yield session
-    finally:
-        await session.close()
-        
-Base = declarative_base()
\ No newline at end of file
diff --git a/src/core/config.py b/src/core/config.py
index b390656..f830ae2 100644
--- a/src/core/config.py
+++ b/src/core/config.py
@@ -1,15 +1,7 @@
-from dotenv import load_dotenv
 from pydantic_settings import BaseSettings
 
 
-load_dotenv()
-
-class Settings(BaseSettings):
-    DB_USER: str 
-    DB_HOST: str 
-    DB_PASSWORD: str 
-    DB_PORT: str 
-    DB_NAME: str 
+class AppSettings(BaseSettings):
     MODE: str
 
     SECRET_KEY: str
@@ -17,19 +9,26 @@ class Settings(BaseSettings):
     ACCESS_TOKEN_EXPIRE_MINUTES: int
     REFRESH_TOKEN_EXPIRE_DAYS: int
     ALGORITHM: str
-    
+
+
+class PgSettings(BaseSettings):
+    POSTGRES_DRV: str
+    POSTGRES_USER: str
+    POSTGRES_PASSWORD: str
+    POSTGRES_SERVER: str
+    POSTGRES_PORT: int
+    POSTGRES_DB: str
+
     @property
-    def connection_string(self):
+    def connection_string(self) -> str:
         return (
-            f'postgresql+asyncpg://'
-            f'{self.DB_USER}:'
-            f'{self.DB_PASSWORD}@'
-            f'{self.DB_HOST}:{self.DB_PORT}/'
-            f'{self.DB_NAME}'
+            f'{self.POSTGRES_DRV}://'
+            f'{self.POSTGRES_USER}:'
+            f'{self.POSTGRES_PASSWORD}@'
+            f'{self.POSTGRES_SERVER}:{self.POSTGRES_PORT}/'
+            f'{self.POSTGRES_DB}'
         )
 
 
-    class Config:
-        env_file = ".env"
-
-settings = Settings()
\ No newline at end of file
+app_settings = AppSettings()
+pg_settings = PgSettings()
diff --git a/src/core/session.py b/src/core/session.py
new file mode 100644
index 0000000..72ae8ae
--- /dev/null
+++ b/src/core/session.py
@@ -0,0 +1,18 @@
+from sqlalchemy.ext.asyncio import AsyncSession , create_async_engine, async_sessionmaker
+from core.config import pg_settings
+
+engine = create_async_engine(pg_settings.connection_string, echo = True)
+
+SessionLocal = async_sessionmaker(
+    bind=engine,
+    class_=AsyncSession,
+    autoflush=False,
+    autocommit = False,
+)
+
+async def get_db():
+    async with SessionLocal() as a_session:
+        try:
+            yield a_session
+        except:
+            await a_session.rollback()
diff --git a/src/main.py b/src/main.py
new file mode 100644
index 0000000..3e93639
--- /dev/null
+++ b/src/main.py
@@ -0,0 +1,13 @@
+from fastapi import FastAPI
+from api import main_router as main_api
+
+
+def create_app():
+    app = FastAPI()
+
+    app.include_router(
+        router=main_api,
+        prefix="/api",
+    )
+
+    return app
diff --git a/src/model/__init__.py b/src/model/__init__.py
index e05ef38..e69de29 100644
--- a/src/model/__init__.py
+++ b/src/model/__init__.py
@@ -1,3 +0,0 @@
-from .user import User
-from .store import Store
-
diff --git a/src/model/base.py b/src/model/base.py
new file mode 100644
index 0000000..913f9cd
--- /dev/null
+++ b/src/model/base.py
@@ -0,0 +1,5 @@
+from sqlalchemy.orm import DeclarativeBase
+
+
+class Base(DeclarativeBase):
+    __abstract__ = True
diff --git a/src/model/booking.py b/src/model/booking.py
index 92a94fc..048fbed 100644
--- a/src/model/booking.py
+++ b/src/model/booking.py
@@ -1,7 +1,7 @@
 from sqlalchemy import Column , String , Integer , Float , ForeignKey , Enum
 from sqlalchemy.dialects.postgresql import JSONB
-from src.core.base import Base
-from enum import Enum
+from model.base import Base
+
 
 class OrderStatus(Enum):
     PENDING = "pending"
diff --git a/src/model/store.py b/src/model/store.py
index e33ba1f..eb374b3 100644
--- a/src/model/store.py
+++ b/src/model/store.py
@@ -1,6 +1,6 @@
-from sqlalchemy import Column , Integer , String, Float , ARRAY 
+from sqlalchemy import Column , Integer , String, Float 
 from sqlalchemy.dialects.postgresql import JSONB
-from src.core.base import Base
+from model.base import Base
 
 
 class Store(Base):
diff --git a/src/model/user.py b/src/model/user.py
index 702b9f0..d23b2c7 100644
--- a/src/model/user.py
+++ b/src/model/user.py
@@ -1,6 +1,6 @@
 from sqlalchemy import Column , Integer , String, DateTime, Enum, Boolean
 from sqlalchemy.sql import func
-from src.core.base import Base
+from model.base import Base
 import enum
 
 class UserRole(enum.Enum):
diff --git a/src/utils/auth_util.py b/src/utils/auth_util.py
index 1fd3f5d..e3a2264 100644
--- a/src/utils/auth_util.py
+++ b/src/utils/auth_util.py
@@ -7,9 +7,9 @@ from passlib.context import CryptContext
 from sqlalchemy.ext.asyncio import AsyncSession
 from sqlalchemy.future import select
 from functools import wraps
-from src.core.config import settings
-from src.model.user import User, UserRole
-from src.core.base import get_db  
+from core.config import app_settings
+from model.user import User, UserRole
+from src.core.session import get_db  
 
 oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")
 pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
@@ -28,19 +28,19 @@ async def create_access_token(data: dict, expires_delta: timedelta) -> str:
     expire = datetime.utcnow() + expires_delta
     to_encode.update({"exp": expire})
     
-    return await asyncio.to_thread(jwt.encode, to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
+    return await asyncio.to_thread(jwt.encode, to_encode, app_settings.SECRET_KEY, algorithm=app_settings.ALGORITHM)
 
 
 async def create_refresh_token(data: dict, expires_delta: timedelta) -> str:
     to_encode = data.copy()
     expire = datetime.utcnow() + expires_delta
     to_encode.update({"exp": expire})
-    return await asyncio.to_thread(jwt.encode, to_encode, settings.REFRESH_SECRET_KEY, algorithm=settings.ALGORITHM)
+    return await asyncio.to_thread(jwt.encode, to_encode, app_settings.REFRESH_SECRET_KEY, algorithm=app_settings.ALGORITHM)
 
 
 async def verify_token(token: str, secret_key: str):
     try:
-        payload = await asyncio.to_thread(jwt.decode, token, secret_key, algorithms=[settings.ALGORITHM])
+        payload = await asyncio.to_thread(jwt.decode, token, secret_key, algorithms=[app_settings.ALGORITHM])
         return payload
     except ExpiredSignatureError:
         unverified_payload = jwt.get_unverified_claims(token)
@@ -66,7 +66,7 @@ async def get_current_user(
     token: str = Depends(oauth2_scheme), 
     db: AsyncSession = Depends(get_db)
 ):
-    payload = await verify_token(token, settings.SECRET_KEY)
+    payload = await verify_token(token, app_settings.SECRET_KEY)
     if not payload:
         raise HTTPException(status_code=401, detail="Invalid token")
     
@@ -102,4 +102,4 @@ def role_required(required_role: UserRole):
                 )
             return await func(*args, current_user=current_user, **kwargs)
         return wrapper
-    return decorator
\ No newline at end of file
+    return decorator
diff --git a/src/utils/crud.py b/src/utils/crud.py
index 217d10a..0400869 100644
--- a/src/utils/crud.py
+++ b/src/utils/crud.py
@@ -2,7 +2,7 @@ from sqlalchemy.ext.asyncio import AsyncSession
 from sqlalchemy.future import select
 from typing import Type, TypeVar, Generic, List , Optional
 from fastapi import HTTPException
-from src.core.base import Base
+from model.base import Base
 
 ModelType = TypeVar("ModelType", bound=Base)
 SchemaType = TypeVar("SchemaType")
-- 
2.49.0

